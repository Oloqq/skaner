// Generated from grammars/tua.g4 by ANTLR 4.12.0
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,56,369,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,
4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,
1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,
31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,
1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,
42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,
5,47,282,8,47,10,47,12,47,285,9,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,
49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,5,51,305,8,51,10,51,
12,51,308,9,51,3,51,310,8,51,1,52,4,52,313,8,52,11,52,12,52,314,1,52,1,52,
5,52,319,8,52,10,52,12,52,322,9,52,1,52,1,52,4,52,326,8,52,11,52,12,52,327,
3,52,330,8,52,1,53,1,53,1,53,5,53,335,8,53,10,53,12,53,338,9,53,1,53,1,53,
1,54,1,54,1,54,5,54,345,8,54,10,54,12,54,348,9,54,1,54,1,54,1,55,1,55,1,
56,1,56,1,56,1,56,3,56,358,8,56,1,56,3,56,361,8,56,1,57,4,57,364,8,57,11,
57,12,57,365,1,57,1,57,0,0,58,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,0,113,
0,115,56,1,0,8,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,
57,2,0,34,34,92,92,2,0,39,39,92,92,1,0,48,57,11,0,34,34,39,39,92,92,97,98,
102,102,110,110,114,114,116,116,118,118,122,122,124,124,3,0,9,10,12,13,32,
32,380,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,
101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,115,
1,0,0,0,1,117,1,0,0,0,3,119,1,0,0,0,5,121,1,0,0,0,7,124,1,0,0,0,9,128,1,
0,0,0,11,134,1,0,0,0,13,137,1,0,0,0,15,142,1,0,0,0,17,149,1,0,0,0,19,154,
1,0,0,0,21,158,1,0,0,0,23,160,1,0,0,0,25,163,1,0,0,0,27,172,1,0,0,0,29,174,
1,0,0,0,31,180,1,0,0,0,33,182,1,0,0,0,35,184,1,0,0,0,37,190,1,0,0,0,39,195,
1,0,0,0,41,197,1,0,0,0,43,199,1,0,0,0,45,201,1,0,0,0,47,204,1,0,0,0,49,211,
1,0,0,0,51,217,1,0,0,0,53,226,1,0,0,0,55,228,1,0,0,0,57,230,1,0,0,0,59,232,
1,0,0,0,61,234,1,0,0,0,63,236,1,0,0,0,65,238,1,0,0,0,67,240,1,0,0,0,69,243,
1,0,0,0,71,246,1,0,0,0,73,249,1,0,0,0,75,252,1,0,0,0,77,255,1,0,0,0,79,257,
1,0,0,0,81,259,1,0,0,0,83,262,1,0,0,0,85,266,1,0,0,0,87,268,1,0,0,0,89,271,
1,0,0,0,91,273,1,0,0,0,93,275,1,0,0,0,95,279,1,0,0,0,97,286,1,0,0,0,99,292,
1,0,0,0,101,297,1,0,0,0,103,309,1,0,0,0,105,329,1,0,0,0,107,331,1,0,0,0,
109,341,1,0,0,0,111,351,1,0,0,0,113,360,1,0,0,0,115,363,1,0,0,0,117,118,
5,59,0,0,118,2,1,0,0,0,119,120,5,61,0,0,120,4,1,0,0,0,121,122,5,100,0,0,
122,123,5,111,0,0,123,6,1,0,0,0,124,125,5,101,0,0,125,126,5,110,0,0,126,
127,5,100,0,0,127,8,1,0,0,0,128,129,5,119,0,0,129,130,5,104,0,0,130,131,
5,105,0,0,131,132,5,108,0,0,132,133,5,101,0,0,133,10,1,0,0,0,134,135,5,105,
0,0,135,136,5,102,0,0,136,12,1,0,0,0,137,138,5,116,0,0,138,139,5,104,0,0,
139,140,5,101,0,0,140,141,5,110,0,0,141,14,1,0,0,0,142,143,5,101,0,0,143,
144,5,108,0,0,144,145,5,115,0,0,145,146,5,101,0,0,146,147,5,105,0,0,147,
148,5,102,0,0,148,16,1,0,0,0,149,150,5,101,0,0,150,151,5,108,0,0,151,152,
5,115,0,0,152,153,5,101,0,0,153,18,1,0,0,0,154,155,5,102,0,0,155,156,5,111,
0,0,156,157,5,114,0,0,157,20,1,0,0,0,158,159,5,44,0,0,159,22,1,0,0,0,160,
161,5,105,0,0,161,162,5,110,0,0,162,24,1,0,0,0,163,164,5,102,0,0,164,165,
5,117,0,0,165,166,5,110,0,0,166,167,5,99,0,0,167,168,5,116,0,0,168,169,5,
105,0,0,169,170,5,111,0,0,170,171,5,110,0,0,171,26,1,0,0,0,172,173,5,58,
0,0,173,28,1,0,0,0,174,175,5,84,0,0,175,176,5,97,0,0,176,177,5,98,0,0,177,
178,5,108,0,0,178,179,5,101,0,0,179,30,1,0,0,0,180,181,5,91,0,0,181,32,1,
0,0,0,182,183,5,93,0,0,183,34,1,0,0,0,184,185,5,85,0,0,185,186,5,110,0,0,
186,187,5,105,0,0,187,188,5,111,0,0,188,189,5,110,0,0,189,36,1,0,0,0,190,
191,5,76,0,0,191,192,5,105,0,0,192,193,5,115,0,0,193,194,5,116,0,0,194,38,
1,0,0,0,195,196,5,46,0,0,196,40,1,0,0,0,197,198,5,40,0,0,198,42,1,0,0,0,
199,200,5,41,0,0,200,44,1,0,0,0,201,202,5,45,0,0,202,203,5,62,0,0,203,46,
1,0,0,0,204,205,5,114,0,0,205,206,5,101,0,0,206,207,5,116,0,0,207,208,5,
117,0,0,208,209,5,114,0,0,209,210,5,110,0,0,210,48,1,0,0,0,211,212,5,98,
0,0,212,213,5,114,0,0,213,214,5,101,0,0,214,215,5,97,0,0,215,216,5,107,0,
0,216,50,1,0,0,0,217,218,5,99,0,0,218,219,5,111,0,0,219,220,5,110,0,0,220,
221,5,116,0,0,221,222,5,105,0,0,222,223,5,110,0,0,223,224,5,117,0,0,224,
225,5,101,0,0,225,52,1,0,0,0,226,227,5,123,0,0,227,54,1,0,0,0,228,229,5,
125,0,0,229,56,1,0,0,0,230,231,5,43,0,0,231,58,1,0,0,0,232,233,5,45,0,0,
233,60,1,0,0,0,234,235,5,42,0,0,235,62,1,0,0,0,236,237,5,47,0,0,237,64,1,
0,0,0,238,239,5,37,0,0,239,66,1,0,0,0,240,241,5,47,0,0,241,242,5,47,0,0,
242,68,1,0,0,0,243,244,5,61,0,0,244,245,5,61,0,0,245,70,1,0,0,0,246,247,
5,126,0,0,247,248,5,61,0,0,248,72,1,0,0,0,249,250,5,60,0,0,250,251,5,61,
0,0,251,74,1,0,0,0,252,253,5,62,0,0,253,254,5,61,0,0,254,76,1,0,0,0,255,
256,5,60,0,0,256,78,1,0,0,0,257,258,5,62,0,0,258,80,1,0,0,0,259,260,5,46,
0,0,260,261,5,46,0,0,261,82,1,0,0,0,262,263,5,97,0,0,263,264,5,110,0,0,264,
265,5,100,0,0,265,84,1,0,0,0,266,267,5,38,0,0,267,86,1,0,0,0,268,269,5,111,
0,0,269,270,5,114,0,0,270,88,1,0,0,0,271,272,5,124,0,0,272,90,1,0,0,0,273,
274,5,94,0,0,274,92,1,0,0,0,275,276,5,110,0,0,276,277,5,111,0,0,277,278,
5,116,0,0,278,94,1,0,0,0,279,283,7,0,0,0,280,282,7,1,0,0,281,280,1,0,0,0,
282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,96,1,0,0,0,285,283,1,
0,0,0,286,287,5,102,0,0,287,288,5,97,0,0,288,289,5,108,0,0,289,290,5,115,
0,0,290,291,5,101,0,0,291,98,1,0,0,0,292,293,5,116,0,0,293,294,5,114,0,0,
294,295,5,117,0,0,295,296,5,101,0,0,296,100,1,0,0,0,297,298,5,110,0,0,298,
299,5,105,0,0,299,300,5,108,0,0,300,102,1,0,0,0,301,310,5,48,0,0,302,306,
7,2,0,0,303,305,3,111,55,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,
0,306,307,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,309,301,1,0,0,0,309,302,
1,0,0,0,310,104,1,0,0,0,311,313,3,111,55,0,312,311,1,0,0,0,313,314,1,0,0,
0,314,312,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,320,5,46,0,0,317,319,
3,111,55,0,318,317,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,
0,321,330,1,0,0,0,322,320,1,0,0,0,323,325,5,46,0,0,324,326,3,111,55,0,325,
324,1,0,0,0,326,327,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,330,1,0,
0,0,329,312,1,0,0,0,329,323,1,0,0,0,330,106,1,0,0,0,331,336,5,34,0,0,332,
335,3,113,56,0,333,335,8,3,0,0,334,332,1,0,0,0,334,333,1,0,0,0,335,338,1,
0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,336,1,0,0,0,339,
340,5,34,0,0,340,108,1,0,0,0,341,346,5,39,0,0,342,345,3,113,56,0,343,345,
8,4,0,0,344,342,1,0,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,
346,347,1,0,0,0,347,349,1,0,0,0,348,346,1,0,0,0,349,350,5,39,0,0,350,110,
1,0,0,0,351,352,7,5,0,0,352,112,1,0,0,0,353,354,5,92,0,0,354,361,7,6,0,0,
355,357,5,92,0,0,356,358,5,13,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,
1,0,0,0,359,361,5,10,0,0,360,353,1,0,0,0,360,355,1,0,0,0,361,114,1,0,0,0,
362,364,7,7,0,0,363,362,1,0,0,0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,
1,0,0,0,366,367,1,0,0,0,367,368,6,57,0,0,368,116,1,0,0,0,15,0,283,306,309,
314,320,327,329,334,336,344,346,357,360,365,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class tuaLexer extends antlr4.Lexer {

    static grammarFileName = "tua.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "';'", "'='", "'do'", "'end'", "'while'", 
                         "'if'", "'then'", "'elseif'", "'else'", "'for'", 
                         "','", "'in'", "'function'", "':'", "'Table'", 
                         "'['", "']'", "'Union'", "'List'", "'.'", "'('", 
                         "')'", "'->'", "'return'", "'break'", "'continue'", 
                         "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", 
                         "'//'", "'=='", "'~='", "'<='", "'>='", "'<'", 
                         "'>'", "'..'", "'and'", "'&'", "'or'", "'|'", "'^'", 
                         "'not'", null, "'false'", "'true'", "'nil'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          "NAME", "FALSE", "TRUE", "NIL", "INT", "FLOAT", 
                          "DOUBLEQUOTESTRING", "SINGLEQUOTESTRING", "WHITESPACE" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
                      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", 
                      "T__31", "T__32", "T__33", "T__34", "T__35", "T__36", 
                      "T__37", "T__38", "T__39", "T__40", "T__41", "T__42", 
                      "T__43", "T__44", "T__45", "T__46", "NAME", "FALSE", 
                      "TRUE", "NIL", "INT", "FLOAT", "DOUBLEQUOTESTRING", 
                      "SINGLEQUOTESTRING", "Digit", "EscapeSequence", "WHITESPACE" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

tuaLexer.EOF = antlr4.Token.EOF;
tuaLexer.T__0 = 1;
tuaLexer.T__1 = 2;
tuaLexer.T__2 = 3;
tuaLexer.T__3 = 4;
tuaLexer.T__4 = 5;
tuaLexer.T__5 = 6;
tuaLexer.T__6 = 7;
tuaLexer.T__7 = 8;
tuaLexer.T__8 = 9;
tuaLexer.T__9 = 10;
tuaLexer.T__10 = 11;
tuaLexer.T__11 = 12;
tuaLexer.T__12 = 13;
tuaLexer.T__13 = 14;
tuaLexer.T__14 = 15;
tuaLexer.T__15 = 16;
tuaLexer.T__16 = 17;
tuaLexer.T__17 = 18;
tuaLexer.T__18 = 19;
tuaLexer.T__19 = 20;
tuaLexer.T__20 = 21;
tuaLexer.T__21 = 22;
tuaLexer.T__22 = 23;
tuaLexer.T__23 = 24;
tuaLexer.T__24 = 25;
tuaLexer.T__25 = 26;
tuaLexer.T__26 = 27;
tuaLexer.T__27 = 28;
tuaLexer.T__28 = 29;
tuaLexer.T__29 = 30;
tuaLexer.T__30 = 31;
tuaLexer.T__31 = 32;
tuaLexer.T__32 = 33;
tuaLexer.T__33 = 34;
tuaLexer.T__34 = 35;
tuaLexer.T__35 = 36;
tuaLexer.T__36 = 37;
tuaLexer.T__37 = 38;
tuaLexer.T__38 = 39;
tuaLexer.T__39 = 40;
tuaLexer.T__40 = 41;
tuaLexer.T__41 = 42;
tuaLexer.T__42 = 43;
tuaLexer.T__43 = 44;
tuaLexer.T__44 = 45;
tuaLexer.T__45 = 46;
tuaLexer.T__46 = 47;
tuaLexer.NAME = 48;
tuaLexer.FALSE = 49;
tuaLexer.TRUE = 50;
tuaLexer.NIL = 51;
tuaLexer.INT = 52;
tuaLexer.FLOAT = 53;
tuaLexer.DOUBLEQUOTESTRING = 54;
tuaLexer.SINGLEQUOTESTRING = 55;
tuaLexer.WHITESPACE = 56;



